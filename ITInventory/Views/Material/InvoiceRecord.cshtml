@model ContentManagementSystem.Models.MaterialViewModel

@{
    var urlBase = "https://yourdomain.com/"; // Set your base URL here
}

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        @await Html.PartialAsync("_Sidebar")

        <!-- Main content -->
        <div class="col-md-10">
            <div class="container mt-4">
                <h3>Invoice Record</h3>

                <!-- Search and Filter Section -->
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="get" id="filterForm">
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Search</label>
                                        <input type="text" id="searchTerm" name="searchTerm" class="form-control" 
                                               value="@Model.SearchTerm" placeholder="Search invoices...">
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Bill Date From</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control date-picker" id="startDate" 
                                                   name="startDate" value="@Model.StartDate" placeholder="DD/MM/YYYY">
                                            <span class="input-group-text">
                                                <i class="fas fa-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Bill Date To</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control date-picker" id="endDate" 
                                                   name="endDate" value="@Model.EndDate" placeholder="DD/MM/YYYY">
                                            <span class="input-group-text">
                                                <i class="fas fa-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Received Date From</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control date-picker" id="receivedDateFrom" 
                                                   name="receivedDateFrom" value="@Model.ReceivedDateFrom" placeholder="DD/MM/YYYY">
                                            <span class="input-group-text">
                                                <i class="fas fa-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        <label>Received Date To</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control date-picker" id="receivedDateTo" 
                                                   name="receivedDateTo" value="@Model.ReceivedDateTo" placeholder="DD/MM/YYYY">
                                            <span class="input-group-text">
                                                <i class="fas fa-calendar"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-1">
                                    <div class="form-group">
                                        <label>&nbsp;</label>
                                        <div>
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-search"></i>
                                            </button>
                                            <button type="button" class="btn btn-secondary" onclick="clearFilters()">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                
                <div class="table-responsive mt-4">
                    <table class="table table-bordered" id="invoiceTable">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 50px;"></th>
                                <th>Invoice No</th>
                                <th>Bill Date</th>
                                <th>Received Date</th>
                                <th>Company</th>
                                <th>Asset</th>
                                <th>Vendor</th>
                                <th>Manufacturer</th>
                                <th>Invoice Image</th>
                                <th>Total Items</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var material in Model.Materials)
                            {
                                <tr class="main-row" data-material-id="@material.Id">
                                    <td class="text-center">
                                        <button type="button" class="btn btn-link expand-button" data-material-id="@material.Id">
                                            <i class="fas fa-chevron-circle-right"></i>
                                        </button>
                                    </td>
                                    <td>@material.InvoiceNo</td>
                                    <td>@material.BillDate.ToString("dd/MM/yyyy")</td>
                                    <td>@material.RecordDate.ToString("dd/MM/yyyy")</td>
                                    <td>@material.Company?.Name</td>
                                    <td>@material.AssetItem?.Name</td>
                                    <td class="asset-name d-none">@material.AssetItem?.Name</td>
                                    <td>@material.CustomVendorName</td>
                                    <td>@(material.CustomManufacturerName ?? material.Manufacturer?.Name)</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(material.ImagePath))
                                        {
                                            <a href="@material.ImagePath" target="_blank" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-image"></i> View
                                            </a>
                                        }
                                    </td>
                                    <td>@material.MaterialItems?.Count</td>
                                </tr>
                                <tr class="expandable-row" style="display: none;">
                                    <td colspan="8">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="row mb-3">
                                                    <div class="col-md-3">
                                                        <strong>Invoice Image:</strong>
                                                        @if (!string.IsNullOrEmpty(material.ImagePath))
                                                        {
                                                            <img src="@material.ImagePath" class="img-fluid mt-2" style="max-height: 100px;" />
                                                        }
                                                    </div>
                                                    <div class="col-md-9">
                                                        <div class="row">
                                                            <div class="col-md-4">
                                                                <strong>Record Date:</strong> @material.RecordDate.ToString("dd/MM/yyyy")
                                                            </div>
                                                            <div class="col-md-4">
                                                                <strong>Month:</strong> @material.Month
                                                            </div>
                                                            <div class="col-md-4">
                                                                <strong>Year:</strong> @material.Year
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <h6 class="mb-3">Material Items</h6>
                                                <div class="table-responsive">
                                                    <table class="table table-sm table-bordered">
                                                        <thead class="table-light">
                                                            <tr>
                                                                <th>Serial No</th>
                                                                <th>Model No</th>
                                                                <th class="other-specs">Item Name</th>
                                                                <th class="computer-specs">Generation</th>
                                                                <th class="computer-specs">Processor</th>
                                                                <th class="computer-specs">RAM (GB)</th>
                                                                <th class="computer-specs">HDD</th>
                                                                <th class="computer-specs">SSD</th>
                                                                <th class="other-specs">Other Details</th>
                                                                <th class="computer-specs">Windows Key</th>
                                                                <th class="computer-specs">MS Office Key</th>
                                                                <th>Warranty Date</th>
                                                                <th>Status</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var item in material.MaterialItems ?? new List<MaterialItem>())
                                                            {
                                                                bool isComputerAsset = material.AssetItem.Name == "Desktop" || 
                                                                    material.AssetItem.Name == "Laptop" || 
                                                                    material.AssetItem.Name == "Server";
                                                                <tr>
                                                                    <td>@item.SerialNo</td>
                                                                    <td>@item.ModelNo</td>
                                                                    <td class="other-specs" style="display: @(!isComputerAsset ? "" : "none")">@item.ItemName</td>
                                                                    <td class="computer-specs" style="display: @(isComputerAsset ? "" : "none")">@item.Generation</td>
                                                                    <td class="computer-specs" style="display: @(isComputerAsset ? "" : "none")">@item.CPUCapacity</td>
                                                                    <td class="computer-specs" style="display: @(isComputerAsset ? "" : "none")">@item.RAMCapacity</td>
                                                                    <td class="computer-specs" style="display: @(isComputerAsset ? "" : "none")">@item.HardDisk</td>
                                                                    <td class="computer-specs" style="display: @(isComputerAsset ? "" : "none")">@item.SSDCapacity</td>
                                                                    <td class="other-specs" style="display: @(!isComputerAsset ? "" : "none")">@item.Other</td>
                                                                    <td class="computer-specs" style="display: @(isComputerAsset ? "" : "none")">@item.WindowsKey</td>
                                                                    <td class="computer-specs" style="display: @(isComputerAsset ? "" : "none")">@item.MSOfficeKey</td>
                                                                    <td>@(item.WarrantyDate?.ToString("dd/MM/yyyy"))</td>
                                                                    <td>
                                                                        <span class="badge @(item.Status == "Assigned" ? "bg-success" : "bg-primary")">
                                                                            @item.Status
                                                                        </span>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    
    <script>
        function geturl() {
            let url = window.location.hostname;
            if (url == 'localhost') {
                return '';
            }
            else return '/itinventory';
        }
        let myurl = geturl();

        $(document).ready(function() {
            console.log('Document ready');

            // Handle expand/collapse with direct click binding
            $('.expand-button').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                var $button = $(this);
                var materialId = $button.data('material-id');
                var $icon = $button.find('i');
                var $row = $button.closest('tr');
                
                console.log('Button clicked');
                console.log('Material ID:', materialId);

                if ($icon.hasClass('fa-chevron-circle-right')) {
                    // Expanding
                    $icon.removeClass('fa-chevron-circle-right').addClass('fa-chevron-circle-down');
                    
                    // Show loading indicator
                    var loadingRow = `
                        <tr class="expandable-row loading-row">
                            <td colspan="10" class="text-center py-3">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </td>
                        </tr>`;
                    $row.after(loadingRow);

                    // Make the AJAX call with correct URL
                    $.ajax({
                        url: myurl + '/Material/GetMaterialItems',
                        type: 'GET',
                        data: { materialId: materialId },
                        success: function(response) {
                            console.log('API Response:', response);
                            $('.loading-row').remove();
                            
                            if (response.success && response.data) {
                                // Get the asset type from the current row
                                const assetType = $row.find('.asset-name').text().trim();
                                var detailRow = generateItemsTable(response.data, assetType);
                                $row.after(detailRow);
                            } else {
                                toastr.error('No items found or error loading items');
                                $icon.removeClass('fa-chevron-circle-down').addClass('fa-chevron-circle-right');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('Ajax Error:', error);
                            console.error('Status:', status);
                            console.error('Response:', xhr.responseText);
                            $('.loading-row').remove();
                            $icon.removeClass('fa-chevron-circle-down').addClass('fa-chevron-circle-right');
                            toastr.error('Error loading material items');
                        }
                    });
                } else {
                    // Collapsing
                    $icon.removeClass('fa-chevron-circle-down').addClass('fa-chevron-circle-right');
                    $row.next('.expandable-row').remove();
                }
            });

            function generateItemsTable(items, assetType) {
                if (!items || items.length === 0) {
                    return `
                        <tr class="expandable-row">
                            <td colspan="8" class="text-center py-3">
                                No items found for this invoice
                            </td>
                        </tr>`;
                }

                var content = `
                    <tr class="expandable-row">
                        <td colspan="12" class="p-0">
                            <div class="detail-content p-3">
                                <div class="asset-type d-none">${assetType}</div>
                                ${generateMaterialItemsTable(items, assetType)}
                            </div>
                        </td>
                    </tr>`;

                return content;
            }

            function generateMaterialItemsTable(items, assetType) {
                const isComputerAsset = ['Desktop', 'Laptop', 'Server'].includes(assetType);
                
                // Define columns based on asset type
                const commonColumns = `
                    <th>Serial No</th>
                    <th>Model No</th>
                    <th>Warranty Date</th>
                    <th>Status</th>
                `;
                
                const computerColumns = `
                    <th>Generation</th>
                    <th>Processor</th>
                    <th>RAM (GB)</th>
                    <th>HDD</th>
                    <th>SSD</th>
                    <th>Windows Key</th>
                    <th>MS Office Key</th>
                `;
                
                const otherColumns = `
                    <th>Item Name</th>
                    <th>Other Details</th>
                `;

                let tableContent = `
                    <table class="table table-sm table-bordered mb-0">
                        <thead class="table-light">
                            <tr>
                                ${commonColumns}
                                ${isComputerAsset ? computerColumns : otherColumns}
                            </tr>
                        </thead>
                        <tbody>
                `;

                items.forEach(function(item) {
                    const commonCells = `
                        <td>${item.serialNo || ''}</td>
                        <td>${item.modelNo || ''}</td>
                        <td>${item.warrantyDate || ''}</td>
                        <td>
                            <span class="badge ${item.status === 'Assigned' ? 'bg-success' : 'bg-primary'}">
                                ${item.status || 'Available'}
                            </span>
                        </td>
                    `;
                    
                    const computerCells = `
                        <td>${item.generation || ''}</td>
                        <td>${item.processor || ''}</td>
                        <td>${item.ramCapacity || ''}</td>
                        <td>${item.hardDisk || ''}</td>
                        <td>${item.ssdCapacity || ''}</td>
                        <td>${item.windowsKey || ''}</td>
                        <td>${item.msOfficeKey || ''}</td>
                    `;
                    
                    const otherCells = `
                        <td>${item.itemName || ''}</td>
                        <td>${item.other || ''}</td>
                    `;

                    tableContent += `
                        <tr>
                            ${commonCells}
                            ${isComputerAsset ? computerCells : otherCells}
                        </tr>
                    `;
                });

                tableContent += `
                        </tbody>
                    </table>
                `;

                return tableContent;
            }

            // Log initial table state
            console.log('Total rows:', $('#invoiceTable tbody tr.main-row').length);

            // Initialize DataTable
            var table = $('#invoiceTable').DataTable({
                order: [[1, 'desc']],
                pageLength: 25,
                language: {
                    search: "Search invoices:"
                },
                columnDefs: [
                    { orderable: false, targets: 0 }
                ]
            });

            // Initialize date pickers
            $('.date-picker').datepicker({
                format: 'dd/mm/yyyy',
                autoclose: true,
                todayHighlight: true
            });

            // Show success message if exists
            @if (TempData["ShowMessage"]?.ToString() == "True")
            {
                <text>
                Swal.fire({
                    title: 'Success!',
                    text: '@TempData["Success"]',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
                </text>
            }

            // Function to update column visibility based on asset type
            function updateColumnVisibility() {
                $('.table').each(function() {
                    const assetType = $(this).closest('.detail-content').find('.asset-type').text();
                    const isComputerAsset = ['Desktop', 'Laptop', 'Server'].includes(assetType);
                    
                    $(this).find('th.computer-specs, td.computer-specs').toggle(isComputerAsset);
                    $(this).find('th.other-specs, td.other-specs').toggle(!isComputerAsset);
                });
            }

            // Initial column visibility update
            updateColumnVisibility();
        });

        function clearFilters() {
            $('#searchTerm').val('');
            $('.date-picker').val('');
            $('#filterForm').submit();
        }
    </script>

    <style>
        .expand-button {
            padding: 0.25rem 0.5rem !important;
            margin: 0;
            border: none;
            background: transparent;
        }

        .expand-button:hover {
            color: #0056b3;
        }

        .expand-button i {
            transition: transform 0.2s ease-in-out;
        }

        .expand-button i.fa-chevron-circle-down {
            transform: rotate(180deg);
        }

        .detail-content {
            background-color: #f8f9fa;
            border-top: 2px solid #dee2e6;
        }

        .loading-row td {
            background-color: #fff;
        }

        .expandable-row {
            transition: all 0.3s ease-in-out;
        }

        .active-row {
            background-color: #f8f9fa;
        }

        .expandable-row td {
            padding: 0 !important;
        }

        .card {
            margin: 0;
            border: none;
            border-radius: 0;
        }

        .table-sm td, .table-sm th {
            padding: 0.5rem;
            font-size: 0.9rem;
        }

        .badge {
            font-size: 0.8rem;
        }

        /* Make sure the expand button is clearly clickable */
        .expand-button {
            padding: 5px !important;
            display: inline-block;
            min-width: 30px;
        }

        /* Add hover effect */
        .main-row:hover {
            background-color: rgba(0,0,0,.05);
        }

        /* Add these styles to handle column visibility */
        .computer-specs, .other-specs {
            transition: all 0.3s ease;
        }

        /* Adjust table layout when columns are hidden */
        .table {
            table-layout: auto;
        }

        /* Ensure proper spacing in visible cells */
        .table td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }

        /* Add tooltip for truncated content */
        .table td {
            position: relative;
        }

        .table td:hover {
            overflow: visible;
            white-space: normal;
            word-break: break-word;
        }

        .d-none {
            display: none !important;
        }
    </style>
} 